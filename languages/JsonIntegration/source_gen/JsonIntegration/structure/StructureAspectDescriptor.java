package JsonIntegration.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"JsonIntegration.structure.JsonArray", "JsonIntegration.structure.JsonBoolean", "JsonIntegration.structure.JsonElement", "JsonIntegration.structure.JsonFalse", "JsonIntegration.structure.JsonFile", "JsonIntegration.structure.JsonInteger", "JsonIntegration.structure.JsonNull", "JsonIntegration.structure.JsonObject", "JsonIntegration.structure.JsonProperty", "JsonIntegration.structure.JsonRealNumber", "JsonIntegration.structure.JsonString", "JsonIntegration.structure.JsonTrue", "JsonIntegration.structure.ParsingError", "JsonIntegration.structure.TextFile"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonArray", "JsonIntegration.structure.JsonElement", false, new String[]{"JsonIntegration.structure.JsonElement"}, new String[]{}, new String[]{});
      case 1:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonBoolean", "JsonIntegration.structure.JsonElement", false, new String[]{"JsonIntegration.structure.JsonElement"}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonElement", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 3:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonFalse", "JsonIntegration.structure.JsonBoolean", false, new String[]{"JsonIntegration.structure.JsonBoolean"}, new String[]{}, new String[]{});
      case 4:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonFile", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 5:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonInteger", "JsonIntegration.structure.JsonElement", false, new String[]{"JsonIntegration.structure.JsonElement"}, new String[]{"value"}, new String[]{});
      case 6:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonNull", "JsonIntegration.structure.JsonElement", false, new String[]{"JsonIntegration.structure.JsonElement"}, new String[]{}, new String[]{});
      case 7:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonObject", "JsonIntegration.structure.JsonElement", false, new String[]{"JsonIntegration.structure.JsonElement"}, new String[]{}, new String[]{});
      case 8:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonProperty", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 9:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonRealNumber", "JsonIntegration.structure.JsonElement", false, new String[]{"JsonIntegration.structure.JsonElement"}, new String[]{"entirePart", "decimalPart"}, new String[]{});
      case 10:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonString", "JsonIntegration.structure.JsonElement", false, new String[]{"JsonIntegration.structure.JsonElement"}, new String[]{"value"}, new String[]{});
      case 11:
        return new CompiledConceptDescriptor("JsonIntegration.structure.JsonTrue", "JsonIntegration.structure.JsonBoolean", false, new String[]{"JsonIntegration.structure.JsonBoolean"}, new String[]{}, new String[]{});
      case 12:
        return new CompiledConceptDescriptor("JsonIntegration.structure.ParsingError", "JsonIntegration.structure.JsonElement", false, new String[]{"JsonIntegration.structure.JsonElement"}, new String[]{"message"}, new String[]{});
      case 13:
        return new CompiledConceptDescriptor("JsonIntegration.structure.TextFile", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{"content"}, new String[]{});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
