package JsonIntegration.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.BaseSModelDescriptorWithSource;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.IModule;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.vfs.IFile;

public class JsonModelDescriptor extends BaseSModelDescriptorWithSource implements EditableSModelDescriptor {
  private SModel myModel = null;
  private IModule myModule;
  private boolean isChanged = false;

  public JsonModelDescriptor(IModule module, JsonModelDataSource source) {
    super(JsonPersistenceUtil.refByModule(module.getModuleReference()), source, false);
    this.myModule = module;
    updateDiskTimestamp();
  }

  protected void reloadFromDiskSafe() {
    final SModel old = myModel;
    check_wrvezs_a1a0(old);

    myModel = null;
    isChanged = false;
    updateDiskTimestamp();

    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        ModelAccess.instance().runWriteAction(new Runnable() {
          public void run() {
            fireModelReplaced();
            fireModelStateChanged(ModelLoadingState.FULLY_LOADED, ModelLoadingState.NOT_LOADED);

            check_wrvezs_a3a0a0a0h0a(old);
          }
        });
      }
    });
  }

  public long lastChangeTime() {
    return getSourceTimestamp();
  }

  public boolean isChanged() {
    return isChanged;
  }

  public void setChanged(boolean value) {
    isChanged = value;
    updateDiskTimestamp();
  }

  public void save() {
    System.out.println("MD save");
    getSource().saveModel(this);
    isChanged = false;
    updateDiskTimestamp();
  }

  public void rename(SModelFqName name, boolean b) {
    throw new UnsupportedOperationException();
  }

  @Deprecated
  public boolean isReadOnly() {
    return false;
  }

  @Deprecated
  public IFile getModelFile() {
    return null;
  }

  protected SModel getCurrentModelInternal() {
    return myModel;
  }

  public synchronized SModel getSModel() {
    if (myModel == null) {
      myModel = getSource().loadSModel(myModule, this, ModelLoadingState.FULLY_LOADED).getModel();
      myModel.setModelDescriptor(this);

      fireModelStateChanged(ModelLoadingState.NOT_LOADED, ModelLoadingState.FULLY_LOADED);
    }
    return myModel;
  }

  public ModelLoadingState getLoadingState() {
    return (myModel == null ?
      ModelLoadingState.NOT_LOADED :
      ModelLoadingState.FULLY_LOADED
    );
  }

  private static void check_wrvezs_a1a0(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.setModelDescriptor(null);
    }

  }

  private static void check_wrvezs_a3a0a0a0h0a(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.dispose();
    }

  }
}
