package JsonIntegration.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import com.google.gson.JsonElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import com.google.gson.JsonObject;
import java.util.Iterator;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import com.google.gson.JsonArray;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.google.gson.JsonPrimitive;
import com.google.gson.Gson;
import java.util.Scanner;

public class JsonIO {
  public JsonIO() {
  }

  public static void save(SNode node, OutputStream out) throws IOException {
    out.write(toJson(node).getBytes());
  }

  public static void loadJsonFile(InputStream in, SNode jsonFileNode) {
    String jsonCode = readString(in);
    loadJsonFileContentFromString(jsonCode, jsonFileNode);
  }

  private static String toJson(SNode node) {
    return nodeToJson(SLinkOperations.getTarget(node, "root", true), "");
  }

  private static String nodeToJson(SNode node, String indent) {
    String moreIndent = indent + "  ";
    StringBuffer sb = new StringBuffer();
    boolean found = false;
    {
      SNode array = node;
      if (SNodeOperations.isInstanceOf(array, "JsonIntegration.structure.JsonArray")) {
        sb.append("[\n");
        for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(array, "content", true)).count(); i++) {
          sb.append(moreIndent);
          sb.append(nodeToJson(ListSequence.fromList(SLinkOperations.getTargets(array, "content", true)).getElement(i), moreIndent));
          if (i != ListSequence.fromList(SLinkOperations.getTargets(array, "content", true)).count() - 1) {
            sb.append(",");
          }
          sb.append("\n");
        }
        sb.append(indent + "]\n");
        return sb.toString();
      }
    }
    {
      SNode f = node;
      if (SNodeOperations.isInstanceOf(f, "JsonIntegration.structure.JsonFalse")) {
        return "false";
      }
    }
    {
      SNode t = node;
      if (SNodeOperations.isInstanceOf(t, "JsonIntegration.structure.JsonTrue")) {
        return "true";
      }
    }
    {
      SNode i = node;
      if (SNodeOperations.isInstanceOf(i, "JsonIntegration.structure.JsonInteger")) {
        return Integer.toString(SPropertyOperations.getInteger(i, "value"));
      }
    }
    {
      SNode n = node;
      if (SNodeOperations.isInstanceOf(n, "JsonIntegration.structure.JsonNull")) {
        return "";
      }
    }
    {
      SNode obj = node;
      if (SNodeOperations.isInstanceOf(obj, "JsonIntegration.structure.JsonObject")) {
        sb.append("{\n");
        for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(obj, "properties", true)).count(); i++) {
          sb.append(moreIndent);
          sb.append(SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(obj, "properties", true)).getElement(i), "name"));
          sb.append(" : ");
          sb.append(nodeToJson(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(obj, "properties", true)).getElement(i), "value", true), moreIndent));
          if (i != ListSequence.fromList(SLinkOperations.getTargets(obj, "properties", true)).count() - 1) {
            sb.append(",");
          }
          sb.append("\n");
        }
        sb.append(indent + "}\n");
        return sb.toString();
      }
    }
    {
      SNode rn = node;
      if (SNodeOperations.isInstanceOf(rn, "JsonIntegration.structure.JsonRealNumber")) {
        return "0.0";
      }
    }
    {
      SNode str = node;
      if (SNodeOperations.isInstanceOf(str, "JsonIntegration.structure.JsonString")) {
        return "\"" + SPropertyOperations.getString(str, "value") + "\"";
      }
    }
    throw new UnsupportedOperationException(INamedConcept_Behavior.call_getFqName_1213877404258(SNodeOperations.getConceptDeclaration(node)));
  }

  private static SNode toJsonElement(JsonElement element) {
    if (element == null || element.isJsonNull()) {
      return SConceptOperations.createNewNode("JsonIntegration.structure.JsonNull", null);
    }
    if (element.isJsonObject()) {
      JsonObject obj = element.getAsJsonObject();
      SNode node = SConceptOperations.createNewNode("JsonIntegration.structure.JsonObject", null);
      {
        Iterator<Map.Entry<String, JsonElement>> entry_it = SetSequence.fromSet(obj.entrySet()).iterator();
        Map.Entry<String, JsonElement> entry_var;
        while (entry_it.hasNext()) {
          entry_var = entry_it.next();
          SNode propNode = SConceptOperations.createNewNode("JsonIntegration.structure.JsonProperty", null);
          SPropertyOperations.set(propNode, "name", entry_var.getKey());
          SLinkOperations.setTarget(propNode, "value", toJsonElement(entry_var.getValue()), true);
          ListSequence.fromList(SLinkOperations.getTargets(node, "properties", true)).addElement(propNode);
        }
      }
      return node;
    }
    if (element.isJsonArray()) {
      JsonArray arr = element.getAsJsonArray();
      SNode node = SConceptOperations.createNewNode("JsonIntegration.structure.JsonArray", null);
      {
        Iterator<JsonElement> item_it = Sequence.fromIterable(arr).iterator();
        JsonElement item_var;
        while (item_it.hasNext()) {
          item_var = item_it.next();
          ListSequence.fromList(SLinkOperations.getTargets(node, "content", true)).addElement(toJsonElement(item_var));
        }
      }
      return node;
    }
    if (element.isJsonPrimitive()) {
      JsonPrimitive pr = element.getAsJsonPrimitive();
      if (pr.isBoolean()) {
        return (pr.getAsBoolean() ?
          SConceptOperations.createNewNode("JsonIntegration.structure.JsonTrue", null) :
          SConceptOperations.createNewNode("JsonIntegration.structure.JsonFalse", null)
        );
      } else if (pr.isNumber()) {
        double value = pr.getAsDouble();
        SNode nn = SConceptOperations.createNewNode("JsonIntegration.structure.JsonRealNumber", null);
        SPropertyOperations.set(nn, "entirePart", "" + 0);
        SPropertyOperations.set(nn, "decimalPart", "" + 0);
        return nn;
      } else if (pr.isString()) {
        SNode s = SConceptOperations.createNewNode("JsonIntegration.structure.JsonString", null);
        SPropertyOperations.set(s, "value", pr.getAsString());
        return s;
      } else {
        throw new UnsupportedOperationException("Primitive " + element.getClass().getCanonicalName());
      }
    }
    throw new UnsupportedOperationException(element.getClass().getCanonicalName());
  }

  private static void loadJsonFileContentFromString(String jsonCode, SNode jsonFileNode) {
    try {
      Gson gson = new Gson();
      JsonElement obj = gson.fromJson(jsonCode, JsonElement.class);
      SLinkOperations.setTarget(jsonFileNode, "root", toJsonElement(obj), true);
    } catch (Exception ex) {
      ex.printStackTrace();
      SNode error = SConceptOperations.createNewNode("JsonIntegration.structure.ParsingError", null);
      SPropertyOperations.set(error, "message", ex.getMessage());
      SLinkOperations.setTarget(jsonFileNode, "root", error, true);
    }
  }

  private static String readString(InputStream stream) {
    Scanner s = new Scanner(stream).useDelimiter("\\A");
    String res = (s.hasNext() ?
      s.next() :
      ""
    );
    return res;
  }
}
