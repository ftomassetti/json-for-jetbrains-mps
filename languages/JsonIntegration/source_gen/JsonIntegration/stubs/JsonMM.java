package JsonIntegration.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.AbstractModelRootManager;
import java.util.Collection;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;

public class JsonMM extends AbstractModelRootManager {
  public JsonMM() {
  }

  public Collection<SModelDescriptor> load(@NotNull ModelRoot root, IModule module) {
    System.out.println("JsonMM requested descriptors");
    List<SModelDescriptor> res = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    ListSequence.fromList(res).addElement(new JsonModelDescriptor(module, new JsonModelDataSource(JsonMM.this.getRootDir(root), module.getModuleReference())));
    return res;
  }

  public boolean canCreateModel(IModule module, @NotNull ModelRoot root, @NotNull SModelFqName fqName) {
    List<SModelDescriptor> models = module.getOwnModelDescriptors();
    return ListSequence.fromList(models).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return eq_ifas7o_a0a0a0a0a0a1a1(it.getSModelReference().getStereotype(), "json");
      }
    }).isEmpty();
  }

  public SModelDescriptor createModel(IModule module, @NotNull ModelRoot root, @NotNull SModelFqName fqName) {
    IFile dir = JsonMM.this.getRootDir(root);
    return new JsonModelDescriptor(module, new JsonModelDataSource(dir, module.getModuleReference()));
  }

  private IFile getRootDir(ModelRoot root) {
    return FileSystem.getInstance().getFileByPath(root.getPath());
  }

  private static boolean eq_ifas7o_a0a0a0a0a0a1a1(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
